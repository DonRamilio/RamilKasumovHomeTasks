package task1;
/**
 * Задание 1:
 * Создать классы Собака и Кот с наследованием от класса Животное.
 * Все животные могут бежать и плыть. В качестве параметра каждому методу передается длина препятствия.
 * Результатом выполнения действия будет печать в консоль. (Например, dogBobik.run(150); -> 'Бобик пробежал 150 м.');
 * У каждого животного есть ограничения на действия (бег: кот 200 м., собака 500 м.; плавание: кот не умеет плавать, собака 10 м.).
 * Добавить подсчет созданных котов, собак и животных.
 * Расширить задачу про котов и тарелки с едой, выполнив следующие пункты:
 * Сделать так, чтобы в тарелке с едой не могло получиться отрицательного количества еды
 * (например, в миске 10 еды, а кот пытается покушать 15-20).
 * Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны).
 * Если коту удалось покушать (хватило еды), сытость = true.
 * Считаем, что если коту мало еды в тарелке, то он её просто не трогает,
 * то есть не может быть наполовину сыт (это сделано для упрощения логики программы).
 * Создать массив котов и тарелку с едой, попросить всех котов покушать из этой тарелки и потом вывести информацию о сытости котов в консоль.
 * Добавить в тарелку метод, с помощью которого можно было бы добавлять еду в тарелку.
 */
class Main {
  public static void main(String[] args) {
    Cat firstCat = new Cat("Snowball");
    Cat secondCat = new Cat("Paw");
    Dog dog = new Dog("Scratchy");

    firstCat.run(500);
    firstCat.swim(100);
    dog.run(120);

    Animal.printCreatedCount();
    Cat.printCreatedCount();
    Dog.printCreatedCount();

    Cat[] cats = new Cat[]{firstCat, secondCat};
    Plate plate = new Plate();
    plate.putFood(50);
    for (Cat currentCat : cats) {
      firstCat.eat(plate, 30);
    }
    firstCat.printFullnessInfo();
    secondCat.printFullnessInfo();

  }
}